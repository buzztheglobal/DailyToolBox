# Generated by Django 5.2.3 on 2025-06-24 08:26

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='MenuItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='The display title of the menu item.', max_length=100, unique=True)),
                ('url', models.CharField(blank=True, help_text='The URL path for the menu item (e.g., /tools/calc or https://example.com).', max_length=255, null=True)),
                ('order', models.IntegerField(default=0, help_text='Order in which menu items appear (lower numbers first).')),
                ('icon', models.CharField(blank=True, help_text="Optional icon class or name (e.g., 'fa-calculator' or 'material-symbols-light:calculator').", max_length=50, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Determines if the menu item is currently active and usable.')),
                ('is_visible', models.BooleanField(default=True, help_text='Controls visibility in the sidebar/navigation (can be active but hidden).')),
                ('is_external', models.BooleanField(default=False, help_text='If true, the URL links to an external website.')),
                ('target', models.CharField(blank=True, choices=[('_self', 'Same Window/Tab'), ('_blank', 'New Window/Tab')], default='_self', help_text='Specifies where to open the linked document (_self, _blank, etc.).', max_length=20, null=True)),
                ('is_dropdown', models.BooleanField(default=False, help_text='Indicates if this menu item is designed to contain dropdown sub-items.')),
                ('tool_domain', models.CharField(blank=True, help_text="Specific domain or category for the tool/convertor (e.g., 'calculator', 'converter').", max_length=100, null=True)),
                ('is_trending', models.BooleanField(default=False, help_text='Highlights this menu item as currently trending.')),
                ('is_promoted', models.BooleanField(default=False, help_text='Marks this menu item for special promotion/visibility.')),
                ('is_featured', models.BooleanField(default=False, help_text='Indicates if the menu item is a featured item (e.g., on homepage).')),
                ('is_hidden', models.BooleanField(default=False, help_text="If true, the menu item is hidden from public view regardless of 'is_visible'.")),
                ('is_draft', models.BooleanField(default=False, help_text='If true, the menu item is in draft state and not yet published.')),
                ('draft_version', models.IntegerField(default=1, help_text='Version number for draft content.')),
                ('is_published', models.BooleanField(default=True, help_text='Indicates if the menu item has been published.')),
                ('published_at', models.DateTimeField(blank=True, help_text='Timestamp when the menu item was published.', null=True)),
                ('is_scheduled', models.BooleanField(default=False, help_text='If true, the menu item is scheduled for future publication.')),
                ('scheduled_at', models.DateTimeField(blank=True, help_text='Timestamp when the menu item is scheduled to be published.', null=True)),
                ('is_featured_image', models.BooleanField(default=False, help_text='Indicates if a featured image is associated with this menu item.')),
                ('featured_image_url', models.URLField(blank=True, help_text='URL of the featured image for the menu item.', max_length=500, null=True)),
                ('is_video', models.BooleanField(default=False, help_text='Indicates if a video is associated with this menu item.')),
                ('video_url', models.URLField(blank=True, help_text='URL of the associated video for the menu item.', max_length=500, null=True)),
                ('seo_title', models.CharField(blank=True, help_text='SEO-friendly title for search engines (e.g., HTML <title> tag).', max_length=255, null=True)),
                ('seo_description', models.TextField(blank=True, help_text='SEO-friendly description for search engines (e.g., meta description).', null=True)),
                ('is_searchable', models.BooleanField(default=True, help_text='Indicates if this menu item should be indexed by search engines.')),
                ('is_cacheable', models.BooleanField(default=True, help_text='Indicates if content related to this menu item can be cached for performance.')),
                ('geo_location', models.CharField(blank=True, help_text="Geographical location or target audience for the menu item (e.g., 'USA', 'Europe').", max_length=255, null=True)),
                ('analytics_data', models.JSONField(blank=True, help_text='Flexible JSON field for storing analytical data or custom attributes.', null=True)),
                ('custom_css', models.TextField(blank=True, help_text='Custom CSS class or inline styles for specific menu item rendering.', null=True)),
                ('custom_js', models.TextField(blank=True, help_text='Custom JavaScript to be executed with this menu item (use with caution).', null=True)),
                ('access_level', models.CharField(choices=[('public', 'Public (Accessible by all)'), ('registered', 'Registered (Accessible by logged-in users)'), ('admin', 'Admin (Accessible by staff/admin users only)'), ('private', 'Private (Accessible by specific users/groups)')], default='public', help_text='Defines who can access this menu item.', max_length=50)),
                ('is_accessible', models.BooleanField(default=True, help_text='Overall accessibility flag (e.g., temporary disable for maintenance).')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_archived', models.BooleanField(default=False, help_text='If true, the menu item is archived (soft delete).')),
                ('archived_at', models.DateTimeField(blank=True, help_text='Timestamp when the menu item was archived.', null=True)),
                ('is_deleted', models.BooleanField(default=False, help_text='If true, the menu item is marked as deleted (soft delete).')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the menu item was deleted.', null=True)),
                ('archived_by', models.ForeignKey(blank=True, help_text='User who archived this menu item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='archived_menu_items', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this menu item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_menu_items', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who deleted this menu item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_menu_items', to=settings.AUTH_USER_MODEL)),
                ('parent_menu', models.ForeignKey(blank=True, help_text='Select a parent menu item for nested navigation.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dropdown_items', to='core.menuitem')),
                ('published_by', models.ForeignKey(blank=True, help_text='User who last published this menu item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='published_menu_items', to=settings.AUTH_USER_MODEL)),
                ('scheduled_by', models.ForeignKey(blank=True, help_text='User who scheduled this menu item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='scheduled_menu_items', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this menu item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_menu_items', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Menu Item',
                'verbose_name_plural': 'Menu Items',
                'ordering': ['order', 'title'],
            },
        ),
    ]
